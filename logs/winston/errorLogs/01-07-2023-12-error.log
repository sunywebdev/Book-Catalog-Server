{
  issues: [
    {
      code: 'invalid_type',
      expected: 'string',
      received: 'undefined',
      path: [ 'body', 'name' ],
      message: 'Name is required'
    },
    {
      code: 'invalid_type',
      expected: 'string',
      received: 'undefined',
      path: [ 'body', 'email' ],
      message: 'Email is required'
    },
    {
      code: 'invalid_type',
      expected: 'number',
      received: 'undefined',
      path: [ 'body', 'level' ],
      message: 'Required'
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'globalErrorHandler [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "name"\n' +
    '    ],\n' +
    '    "message": "Name is required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "email"\n' +
    '    ],\n' +
    '    "message": "Email is required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "number",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "level"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "name"\n' +
    '    ],\n' +
    '    "message": "Name is required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "email"\n' +
    '    ],\n' +
    '    "message": "Email is required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "number",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "level"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  }\n' +
    ']\n' +
    '    at Object.get error [as error] (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:43:31)\n' +
    '    at ZodEffects.parseAsync (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:164:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)',
  label: 'NodeExpressMongoose',
  timestamp: '2023-07-01T06:37:18.093Z'
}
{
  issues: [
    {
      code: 'invalid_type',
      expected: 'string',
      received: 'undefined',
      path: [ 'body', 'email' ],
      message: 'Email is required'
    },
    {
      code: 'invalid_type',
      expected: 'number',
      received: 'undefined',
      path: [ 'body', 'level' ],
      message: 'Required'
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'globalErrorHandler [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "email"\n' +
    '    ],\n' +
    '    "message": "Email is required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "number",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "level"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "email"\n' +
    '    ],\n' +
    '    "message": "Email is required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "number",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "level"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  }\n' +
    ']\n' +
    '    at Object.get error [as error] (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:43:31)\n' +
    '    at ZodEffects.parseAsync (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:164:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)',
  label: 'NodeExpressMongoose',
  timestamp: '2023-07-01T06:39:37.865Z'
}
{
  issues: [
    {
      code: 'invalid_type',
      expected: 'number',
      received: 'undefined',
      path: [ 'body', 'level' ],
      message: 'Required'
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'globalErrorHandler [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "number",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "level"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "number",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "level"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  }\n' +
    ']\n' +
    '    at Object.get error [as error] (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:43:31)\n' +
    '    at ZodEffects.parseAsync (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:164:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)',
  label: 'NodeExpressMongoose',
  timestamp: '2023-07-01T06:40:08.214Z'
}
{
  issues: [
    {
      code: 'custom',
      message: 'Role and level must be provided together or not at all',
      path: []
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'globalErrorHandler [\n' +
    '  {\n' +
    '    "code": "custom",\n' +
    '    "message": "Role and level must be provided together or not at all",\n' +
    '    "path": []\n' +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "code": "custom",\n' +
    '    "message": "Role and level must be provided together or not at all",\n' +
    '    "path": []\n' +
    '  }\n' +
    ']\n' +
    '    at Object.get error [as error] (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:43:31)\n' +
    '    at ZodEffects.parseAsync (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:164:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)',
  label: 'NodeExpressMongoose',
  timestamp: '2023-07-01T06:40:58.200Z'
}
{
  issues: [
    {
      code: 'custom',
      message: 'Role and level must be provided together or not at all',
      path: []
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'globalErrorHandler [\n' +
    '  {\n' +
    '    "code": "custom",\n' +
    '    "message": "Role and level must be provided together or not at all",\n' +
    '    "path": []\n' +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "code": "custom",\n' +
    '    "message": "Role and level must be provided together or not at all",\n' +
    '    "path": []\n' +
    '  }\n' +
    ']\n' +
    '    at Object.get error [as error] (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:43:31)\n' +
    '    at ZodEffects.parseAsync (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:164:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)',
  label: 'NodeExpressMongoose',
  timestamp: '2023-07-01T06:42:32.253Z'
}
{
  issues: [
    {
      code: 'invalid_type',
      expected: 'number',
      received: 'string',
      path: [ 'body', 'level' ],
      message: 'Expected number, received string'
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'globalErrorHandler [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "number",\n' +
    '    "received": "string",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "level"\n' +
    '    ],\n' +
    '    "message": "Expected number, received string"\n' +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "number",\n' +
    '    "received": "string",\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "level"\n' +
    '    ],\n' +
    '    "message": "Expected number, received string"\n' +
    '  }\n' +
    ']\n' +
    '    at Object.get error [as error] (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:43:31)\n' +
    '    at ZodEffects.parseAsync (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\node_modules\\zod\\lib\\types.js:164:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)',
  label: 'NodeExpressMongoose',
  timestamp: '2023-07-01T06:42:50.993Z'
}
{
  statusCode: 400,
  level: 'error',
  message: 'globalErrorHandler Role and level is not a match',
  stack: 'Error: Role and level is not a match\n' +
    '    at C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\src\\app\\modules\\users\\user.service.ts:84:11\n' +
    '    at Generator.next (<anonymous>)\n' +
    '    at C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\src\\app\\modules\\users\\user.service.ts:8:71\n' +
    '    at new Promise (<anonymous>)\n' +
    '    at __awaiter (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\src\\app\\modules\\users\\user.service.ts:4:12)\n' +
    '    at Object.updateUser (C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\src\\app\\modules\\users\\user.service.ts:82:28)\n' +
    '    at C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\src\\app\\modules\\users\\user.controller.ts:64:38\n' +
    '    at Generator.next (<anonymous>)\n' +
    '    at C:\\Users\\SUNYS\\Desktop\\NodeExpressMongoose\\src\\app\\modules\\users\\user.controller.ts:8:71\n' +
    '    at new Promise (<anonymous>)',
  label: 'NodeExpressMongoose',
  timestamp: '2023-07-01T06:42:56.739Z'
}
